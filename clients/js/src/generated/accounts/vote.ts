/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export type Vote = {
  token: Address;
  trueVotes: ReadonlyUint8Array;
  falseVotes: ReadonlyUint8Array;
  endTimestamp: ReadonlyUint8Array;
  vaultBump: number;
};

export type VoteArgs = Vote;

export function getVoteEncoder(): FixedSizeEncoder<VoteArgs> {
  return getStructEncoder([
    ['token', getAddressEncoder()],
    ['trueVotes', fixEncoderSize(getBytesEncoder(), 8)],
    ['falseVotes', fixEncoderSize(getBytesEncoder(), 8)],
    ['endTimestamp', fixEncoderSize(getBytesEncoder(), 8)],
    ['vaultBump', getU8Encoder()],
  ]);
}

export function getVoteDecoder(): FixedSizeDecoder<Vote> {
  return getStructDecoder([
    ['token', getAddressDecoder()],
    ['trueVotes', fixDecoderSize(getBytesDecoder(), 8)],
    ['falseVotes', fixDecoderSize(getBytesDecoder(), 8)],
    ['endTimestamp', fixDecoderSize(getBytesDecoder(), 8)],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getVoteCodec(): FixedSizeCodec<VoteArgs, Vote> {
  return combineCodec(getVoteEncoder(), getVoteDecoder());
}

export function decodeVote<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Vote, TAddress>;
export function decodeVote<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Vote, TAddress>;
export function decodeVote<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Vote, TAddress> | MaybeAccount<Vote, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVoteDecoder()
  );
}

export async function fetchVote<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Vote, TAddress>> {
  const maybeAccount = await fetchMaybeVote(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVote<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Vote, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVote(maybeAccount);
}

export async function fetchAllVote(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Vote>[]> {
  const maybeAccounts = await fetchAllMaybeVote(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVote(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Vote>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVote(maybeAccount));
}

export function getVoteSize(): number {
  return 57;
}
