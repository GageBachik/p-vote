/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
} from 'gill';
import { P_VOTE_PROGRAM_ADDRESS } from '../programs';

export const INITIALIZE_PLATFORM_DISCRIMINATOR = 0;

export function getInitializePlatformDiscriminatorBytes() {
  return getU8Encoder().encode(INITIALIZE_PLATFORM_DISCRIMINATOR);
}

export type InitializePlatformInstruction<
  TProgram extends string = typeof P_VOTE_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type InitializePlatformInstructionData = { discriminator: number };

export type InitializePlatformInstructionDataArgs = {};

export function getInitializePlatformInstructionDataEncoder(): FixedSizeEncoder<InitializePlatformInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: INITIALIZE_PLATFORM_DISCRIMINATOR })
  );
}

export function getInitializePlatformInstructionDataDecoder(): FixedSizeDecoder<InitializePlatformInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getInitializePlatformInstructionDataCodec(): FixedSizeCodec<
  InitializePlatformInstructionDataArgs,
  InitializePlatformInstructionData
> {
  return combineCodec(
    getInitializePlatformInstructionDataEncoder(),
    getInitializePlatformInstructionDataDecoder()
  );
}

export type InitializePlatformInput = {};

export function getInitializePlatformInstruction<
  TProgramAddress extends Address = typeof P_VOTE_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): InitializePlatformInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? P_VOTE_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getInitializePlatformInstructionDataEncoder().encode({}),
  } as InitializePlatformInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedInitializePlatformInstruction<
  TProgram extends string = typeof P_VOTE_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: InitializePlatformInstructionData;
};

export function parseInitializePlatformInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePlatformInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getInitializePlatformInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
