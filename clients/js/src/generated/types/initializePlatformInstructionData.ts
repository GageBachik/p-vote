/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from 'gill';

export type InitializePlatformInstructionData = {
  fee: ReadonlyUint8Array;
  platformBump: number;
  vaultBump: number;
};

export type InitializePlatformInstructionDataArgs =
  InitializePlatformInstructionData;

export function getInitializePlatformInstructionDataEncoder(): FixedSizeEncoder<InitializePlatformInstructionDataArgs> {
  return getStructEncoder([
    ['fee', fixEncoderSize(getBytesEncoder(), 2)],
    ['platformBump', getU8Encoder()],
    ['vaultBump', getU8Encoder()],
  ]);
}

export function getInitializePlatformInstructionDataDecoder(): FixedSizeDecoder<InitializePlatformInstructionData> {
  return getStructDecoder([
    ['fee', fixDecoderSize(getBytesDecoder(), 2)],
    ['platformBump', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getInitializePlatformInstructionDataCodec(): FixedSizeCodec<
  InitializePlatformInstructionDataArgs,
  InitializePlatformInstructionData
> {
  return combineCodec(
    getInitializePlatformInstructionDataEncoder(),
    getInitializePlatformInstructionDataDecoder()
  );
}
