/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type Platform = {
  authority: Address;
  fee: ReadonlyUint8Array;
  platformBump: number;
  vaultBump: number;
};

export type PlatformArgs = Platform;

export function getPlatformEncoder(): FixedSizeEncoder<PlatformArgs> {
  return getStructEncoder([
    ['authority', getAddressEncoder()],
    ['fee', fixEncoderSize(getBytesEncoder(), 2)],
    ['platformBump', getU8Encoder()],
    ['vaultBump', getU8Encoder()],
  ]);
}

export function getPlatformDecoder(): FixedSizeDecoder<Platform> {
  return getStructDecoder([
    ['authority', getAddressDecoder()],
    ['fee', fixDecoderSize(getBytesDecoder(), 2)],
    ['platformBump', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getPlatformCodec(): FixedSizeCodec<PlatformArgs, Platform> {
  return combineCodec(getPlatformEncoder(), getPlatformDecoder());
}

export function decodePlatform<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<Platform, TAddress>;
export function decodePlatform<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<Platform, TAddress>;
export function decodePlatform<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<Platform, TAddress> | MaybeAccount<Platform, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPlatformDecoder(),
  );
}

export async function fetchPlatform<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<Platform, TAddress>> {
  const maybeAccount = await fetchMaybePlatform(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePlatform<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<Platform, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePlatform(maybeAccount);
}

export async function fetchAllPlatform(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<Platform>[]> {
  const maybeAccounts = await fetchAllMaybePlatform(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePlatform(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<Platform>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePlatform(maybeAccount));
}

export function getPlatformSize(): number {
  return 36;
}
