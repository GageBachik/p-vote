/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { P_VOTE_PROGRAM_ADDRESS } from '../programs';

export const INTITIALIZE_POSITION_DISCRIMINATOR = 3;

export function getIntitializePositionDiscriminatorBytes() {
  return getU8Encoder().encode(INTITIALIZE_POSITION_DISCRIMINATOR);
}

export type IntitializePositionInstruction<
  TProgram extends string = typeof P_VOTE_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type IntitializePositionInstructionData = { discriminator: number };

export type IntitializePositionInstructionDataArgs = {};

export function getIntitializePositionInstructionDataEncoder(): FixedSizeEncoder<IntitializePositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: INTITIALIZE_POSITION_DISCRIMINATOR,
    }),
  );
}

export function getIntitializePositionInstructionDataDecoder(): FixedSizeDecoder<IntitializePositionInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getIntitializePositionInstructionDataCodec(): FixedSizeCodec<
  IntitializePositionInstructionDataArgs,
  IntitializePositionInstructionData
> {
  return combineCodec(
    getIntitializePositionInstructionDataEncoder(),
    getIntitializePositionInstructionDataDecoder(),
  );
}

export type IntitializePositionInput = {};

export function getIntitializePositionInstruction<
  TProgramAddress extends Address = typeof P_VOTE_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): IntitializePositionInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? P_VOTE_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getIntitializePositionInstructionDataEncoder().encode({}),
  } as IntitializePositionInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedIntitializePositionInstruction<
  TProgram extends string = typeof P_VOTE_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: IntitializePositionInstructionData;
};

export function parseIntitializePositionInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>,
): ParsedIntitializePositionInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getIntitializePositionInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
