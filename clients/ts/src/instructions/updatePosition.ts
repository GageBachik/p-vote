/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { P_VOTE_PROGRAM_ADDRESS } from '../programs';

export const UPDATE_POSITION_DISCRIMINATOR = 4;

export function getUpdatePositionDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_POSITION_DISCRIMINATOR);
}

export type UpdatePositionInstruction<
  TProgram extends string = typeof P_VOTE_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type UpdatePositionInstructionData = { discriminator: number };

export type UpdatePositionInstructionDataArgs = {};

export function getUpdatePositionInstructionDataEncoder(): FixedSizeEncoder<UpdatePositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: UPDATE_POSITION_DISCRIMINATOR }),
  );
}

export function getUpdatePositionInstructionDataDecoder(): FixedSizeDecoder<UpdatePositionInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getUpdatePositionInstructionDataCodec(): FixedSizeCodec<
  UpdatePositionInstructionDataArgs,
  UpdatePositionInstructionData
> {
  return combineCodec(
    getUpdatePositionInstructionDataEncoder(),
    getUpdatePositionInstructionDataDecoder(),
  );
}

export type UpdatePositionInput = {};

export function getUpdatePositionInstruction<
  TProgramAddress extends Address = typeof P_VOTE_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): UpdatePositionInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? P_VOTE_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getUpdatePositionInstructionDataEncoder().encode({}),
  } as UpdatePositionInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedUpdatePositionInstruction<
  TProgram extends string = typeof P_VOTE_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: UpdatePositionInstructionData;
};

export function parseUpdatePositionInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdatePositionInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getUpdatePositionInstructionDataDecoder().decode(instruction.data),
  };
}
