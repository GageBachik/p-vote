/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializePlatformInstruction,
  type ParsedInitializeVoteInstruction,
  type ParsedIntitializePositionInstruction,
  type ParsedRedeemWinningsInstruction,
  type ParsedUpdatePlatformInstruction,
  type ParsedUpdatePositionInstruction,
} from '../instructions';

export const P_VOTE_PROGRAM_ADDRESS =
  '2YwymitHUGW6vwk66cZpVoq5oGD31Ziz41UNokMBrKeY' as Address<'2YwymitHUGW6vwk66cZpVoq5oGD31Ziz41UNokMBrKeY'>;

export enum PVoteAccount {
  Platform,
  Position,
  Vote,
}

export enum PVoteInstruction {
  InitializePlatform,
  UpdatePlatform,
  InitializeVote,
  IntitializePosition,
  UpdatePosition,
  RedeemWinnings,
}

export function identifyPVoteInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): PVoteInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return PVoteInstruction.InitializePlatform;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return PVoteInstruction.UpdatePlatform;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return PVoteInstruction.InitializeVote;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return PVoteInstruction.IntitializePosition;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return PVoteInstruction.UpdatePosition;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return PVoteInstruction.RedeemWinnings;
  }
  throw new Error(
    'The provided instruction could not be identified as a pVote instruction.',
  );
}

export type ParsedPVoteInstruction<
  TProgram extends string = '2YwymitHUGW6vwk66cZpVoq5oGD31Ziz41UNokMBrKeY',
> =
  | ({
      instructionType: PVoteInstruction.InitializePlatform;
    } & ParsedInitializePlatformInstruction<TProgram>)
  | ({
      instructionType: PVoteInstruction.UpdatePlatform;
    } & ParsedUpdatePlatformInstruction<TProgram>)
  | ({
      instructionType: PVoteInstruction.InitializeVote;
    } & ParsedInitializeVoteInstruction<TProgram>)
  | ({
      instructionType: PVoteInstruction.IntitializePosition;
    } & ParsedIntitializePositionInstruction<TProgram>)
  | ({
      instructionType: PVoteInstruction.UpdatePosition;
    } & ParsedUpdatePositionInstruction<TProgram>)
  | ({
      instructionType: PVoteInstruction.RedeemWinnings;
    } & ParsedRedeemWinningsInstruction<TProgram>);
